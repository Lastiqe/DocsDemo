{"version":3,"sources":["components/mainView/MainView.module.scss","components/explorer/PlacesExplorer.module.scss","components/mainView/inventoryListItem/InventoryListItem.module.scss","components/mainView/AddItemModal/AddItemModal.module.scss","components/spinner/Spinner.module.scss","components/mainView/inventoryListItem/inventoryActionButton/InventoryActionButton.module.scss","components/explorer/explorerTree/RecrusiveTree.module.scss","assets/icons/angle-arrow-down.svg","components/explorer/explorerTree/RecrusiveTree.tsx","assets/gifs/Blocks-1s-207px.svg","components/spinner/Spinner.tsx","components/explorer/PlacesExplorer.tsx","firebase/fireBaseConfig.ts","firebase/firebaseApi.ts","helpers/filledNodesChecker.ts","helpers/pathCreator.ts","helpers/findNodesRoots.ts","helpers/toTreeReducer.ts","redux/firebaseDataReducer.ts","components/explorer/PlacesExplorerContainer.tsx","assets/icons/add.svg","components/mainView/inventoryListItem/inventoryActionButton/InventoryActionButton.tsx","assets/icons/edit.svg","assets/icons/delete.svg","components/mainView/inventoryForm/InventoryForm.tsx","components/mainView/inventoryListItem/InventoryListItem.tsx","components/mainView/AddItemModal/AddItemModal.tsx","components/mainView/MainView.tsx","components/mainView/MainViewContainer.tsx","App.tsx","redux/store.ts","index.tsx","components/mainView/inventoryForm/InventoryForm.module.scss"],"names":["module","exports","RecrusiveTree","props","wrapperClassesOpened","style","detailsWrapper","wrapperClassesAnimated","detailsWrapperAnimated","wrapperClassesClosed","closed","arrowIconClosed","arrowIcon","arrowIconOpened","opened","listItemSelected","selected","useState","isOpened","setNodeState","wrapperClasses","setWrapperClasses","arrowIconClasses","setArrowIconClasses","setSelectedPlace","setSelectedPlaceAction","place","renderTree","node","parts","selectedPlace","map","item1","id","className","treeLi","nodeLi","onClick","setTimeout","iconWrapper","src","alt","name","isFilled","filled","item","React","memo","Spinner","loaderWrapper","loader","width","PlacesExplorer","explorer","explorerHeader","explorerBody","placesTree","length","spinnerWrapper","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","getInventory","firebase","firestore","collection","get","then","response","docs","filter","x","undefined","data","count","placeId","deleteInventory","doc","delete","console","info","addInventory","set","editInventory","placePath","filledNodesChecker","placesArr","inventoryArr","path","modifiedArr","cloneDeep","tempArr","invItem","push","pathId","pathCreator","arr","parentId","history","unshift","parent","findNodesRoots","arrCopy","part","itemId","partsChecker","toTreeArrReducer","sourceNode","treeArr","arrSplice","partId","index","sourceItem","log","splice","SET_INVENTORY_DATA","SET_PLACES_TREE_DATA","SET_PLACES_FLATTEN_DATA","SET_SELECTED_PLACE","SET_PENDING_STATUS","initialState","placesFlat","inventory","isPending","dataInit","dispatch","a","responseInv","setInventoryDataAction","setPlacesFlattenDataAction","setPlacesTreeDataAction","setInventoryThunk","type","setPendingStatusAction","status","connect","state","fireBase","InventoryActionButton","btnClickHandler","role","icon","InventoryForm","setName","setCount","nameValid","setNameValid","countValid","setCountValid","form","formClass","setFormClass","validateName","value","trim","match","validateCount","handleInputChange","e","currentTarget","useEffect","listItemParamsWrapper","modalWrapper","editMode","onSubmit","preventDefault","addInventoryItem","selectedPlaceId","setPendingStatus","editInventoryItem","setEditMode","join","inputWrapper","error","textWrapper","disabled","placeholder","onChange","onBlur","autoComplete","fullText","buttonsWrapper","formButton","submit","cancel","InventoryListItem","setEditModeId","pendingStatus","inventoryListItemWrapper","inventoryListItem","editIcon","deleteIcon","AddItemModal","target","modalToggle","modal","MainView","isModalOpen","setModalState","editModeId","editModeToggle","inventoryId","deleteInventoryItem","viewComponent","modalOpened","inventoryListWrapper","sectionTopRow","inventoryListHeader","addIcon","inventoryList","editInventoryItemThunk","deleteInventoryItemThunk","addInventoryItemThunk","currentInventory","setCurrentInventory","currentPlaceInventory","deepChildsSearch","useCallback","nodeChildsArr","apps","initializeApp","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7bb5d5a6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"viewComponent\":\"MainView_viewComponent__jPp2U\",\"modalOpened\":\"MainView_modalOpened__2sRQb\",\"info\":\"MainView_info__3LFY5\",\"inventoryListWrapper\":\"MainView_inventoryListWrapper__19dof\",\"sectionTopRow\":\"MainView_sectionTopRow__2HwGN\",\"inventoryListHeader\":\"MainView_inventoryListHeader__1EHNZ\",\"inventoryList\":\"MainView_inventoryList__U92cL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"explorer\":\"PlacesExplorer_explorer__2SQiA\",\"explorerHeader\":\"PlacesExplorer_explorerHeader__2yFiQ\",\"explorerBody\":\"PlacesExplorer_explorerBody__ArcXN\",\"placesTree\":\"PlacesExplorer_placesTree__kuQ1H\",\"spinnerWrapper\":\"PlacesExplorer_spinnerWrapper__2k5vr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inventoryListItemWrapper\":\"InventoryListItem_inventoryListItemWrapper__QBSkm\",\"inventoryListItem\":\"InventoryListItem_inventoryListItem__3YmUJ\",\"iconWrapper\":\"InventoryListItem_iconWrapper__gOOhw\",\"spinnerWrapper\":\"InventoryListItem_spinnerWrapper__2Zmel\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalWrapper\":\"AddItemModal_modalWrapper__2m9yD\",\"modal\":\"AddItemModal_modal__2QLio\",\"spinnerWrapper\":\"AddItemModal_spinnerWrapper__2HpYO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loaderWrapper\":\"Spinner_loaderWrapper__2y39y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon\":\"InventoryActionButton_icon__3H3id\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nodeLi\":\"RecrusiveTree_nodeLi__2FBsy\",\"treeLi\":\"RecrusiveTree_treeLi__18et9\",\"name\":\"RecrusiveTree_name__1pEIx\",\"selected\":\"RecrusiveTree_selected__TeRY7\",\"filled\":\"RecrusiveTree_filled__3uOCt\",\"iconWrapper\":\"RecrusiveTree_iconWrapper__2Z6Oa\",\"arrowIcon\":\"RecrusiveTree_arrowIcon__1zb4k\",\"opened\":\"RecrusiveTree_opened__Al9Sf\",\"detailsWrapper\":\"RecrusiveTree_detailsWrapper__2vdYu\",\"closed\":\"RecrusiveTree_closed__37Ehs\",\"detailsWrapperAnimated\":\"RecrusiveTree_detailsWrapperAnimated__3pWpT\"};","export default __webpack_public_path__ + \"static/media/angle-arrow-down.a8dbb320.svg\";","import React, { useState } from 'react'\r\nimport style from './RecrusiveTree.module.scss'\r\nimport arrowIcon from '../../../assets/icons/angle-arrow-down.svg'\r\nimport { TPlacesTree } from '../../../redux/types'\r\n\r\ntype TProps = {\r\n    place: TPlacesTree\r\n    selectedPlace: TPlacesTree\r\n    setSelectedPlaceAction: (place: TPlacesTree) => void\r\n}\r\n\r\nconst RecrusiveTree: React.FC<TProps> = (props) => {\r\n    const wrapperClassesOpened = `${style.detailsWrapper}`\r\n    const wrapperClassesAnimated = `${style.detailsWrapper} ${style.detailsWrapperAnimated}`\r\n    const wrapperClassesClosed = `${style.detailsWrapper} ${style.closed}`\r\n\r\n    const arrowIconClosed = `${style.arrowIcon}`\r\n    const arrowIconOpened = `${style.arrowIcon} ${style.opened}`\r\n    const listItemSelected = `${style.selected}`\r\n\r\n    const [isOpened, setNodeState] = useState(true)\r\n    const [wrapperClasses, setWrapperClasses] = useState(wrapperClassesClosed)\r\n    const [arrowIconClasses, setArrowIconClasses] = useState(arrowIconClosed)\r\n    \r\n    function openNode() {\r\n        setNodeState(!isOpened)\r\n        \r\n        if (!isOpened) {\r\n            setArrowIconClasses(arrowIconClosed)\r\n            setWrapperClasses(wrapperClassesOpened)\r\n            setTimeout(() => {\r\n                setWrapperClasses(wrapperClassesClosed)\r\n            }, 150)\r\n        }\r\n        if (isOpened) {\r\n            setArrowIconClasses(arrowIconOpened)\r\n            setWrapperClasses(wrapperClassesOpened)\r\n            setTimeout(() => {\r\n                setWrapperClasses(wrapperClassesAnimated)\r\n            }, 150)\r\n        }\r\n    }\r\n\r\n    function setSelectedPlace() {\r\n        props.setSelectedPlaceAction(props.place)\r\n    }\r\n\r\n    function renderTree(node: TPlacesTree) {\r\n        if (node.parts) {\r\n            return (\r\n                <RecrusiveTree\r\n                    key={node.id}\r\n                    place={node}\r\n                    selectedPlace={props.selectedPlace}\r\n                    setSelectedPlaceAction={props.setSelectedPlaceAction}>\r\n                    {node.parts.map((item1) => renderTree(item1))}\r\n            </RecrusiveTree>)\r\n        } else {\r\n\r\n            return <RecrusiveTree key={node.id}\r\n                setSelectedPlaceAction={props.setSelectedPlaceAction}\r\n                selectedPlace={props.selectedPlace}\r\n                place={node}/>\r\n        }\r\n    }\r\n    \r\n    return (\r\n        props.place.parts\r\n            ? <div className={`${style.treeLi} ${style.nodeLi}`}>\r\n                <span onClick={openNode} className={style.iconWrapper}>\r\n                    <img src={arrowIcon}\r\n                        className={arrowIconClasses}\r\n                        alt=\"arrow\" />\r\n                </span>\r\n                <span className={`${style.name} ${props.selectedPlace.id === props.place.id ? listItemSelected : ''}`} onClick={setSelectedPlace}>{props.place.name}\r\n                    {props.place.isFilled && <span className={style.filled}></span>}\r\n                </span>\r\n                <div className={wrapperClasses}>\r\n                    {props.place.parts.map((item) => renderTree(item))}\r\n                </div>\r\n            </div>\r\n            : <div className={style.treeLi} >\r\n                <span className={`${style.name} ${props.selectedPlace.id === props.place.id ? listItemSelected : ''} `} onClick={setSelectedPlace}>{props.place.name}\r\n                    {props.place.isFilled && <span className={style.filled}></span>}\r\n                </span>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(RecrusiveTree)","export default __webpack_public_path__ + \"static/media/Blocks-1s-207px.3d4370cf.svg\";","import React from 'react'\r\nimport style from './Spinner.module.scss'\r\nimport loader from '../../assets/gifs/Blocks-1s-207px.svg'\r\n\r\ntype TProps = {\r\n    width: number\r\n}\r\n\r\nconst Spinner: React.FC<TProps> = (props) => {\r\n   \r\n    return (\r\n        <div className={style.loaderWrapper}>\r\n            <img src={loader}\r\n                width={props.width}\r\n                className={style.loader} />\r\n        </div>\r\n    )\r\n}\r\nexport default Spinner","import React from 'react'\r\nimport style from './PlacesExplorer.module.scss'\r\nimport RecrusiveTreeComponent from './explorerTree/RecrusiveTree';\r\nimport Spinner from '../spinner/Spinner';\r\nimport { TPlacesTree } from '../../redux/types';\r\n\r\ntype TProps = {\r\n    placesTree: TPlacesTree[]\r\n    selectedPlace: TPlacesTree\r\n    setSelectedPlaceAction: (place: TPlacesTree) => void\r\n}\r\n\r\nconst PlacesExplorer: React.FC<TProps> = (props) => {\r\n    return (\r\n        <div className={style.explorer}>\r\n            <div className={style.explorerHeader}>\r\n                <h1>Помещения</h1>\r\n            </div>\r\n            <div className={style.explorerBody}>\r\n                {\r\n                    props.placesTree.length\r\n                    ? <div className={style.placesTree}>\r\n                            {props.placesTree.map((item) => {\r\n                            return <RecrusiveTreeComponent\r\n                                setSelectedPlaceAction={props.setSelectedPlaceAction}\r\n                                selectedPlace={props.selectedPlace}\r\n                                place={item}\r\n                                key={item.id} />\r\n                        })}\r\n                    </div>\r\n                        : <div className={style.spinnerWrapper}><Spinner width={150} /></div>\r\n                }\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n    \r\n}\r\nexport default PlacesExplorer","export const firebaseConfig = {\r\n    apiKey: \"AIzaSyD6DnGbVfdJlDJ_pEOUfDfTDJrA8j3lIs8\",\r\n    authDomain: \"dv-inventory.firebaseapp.com\",\r\n    databaseURL: \"https://dv-inventory.firebaseio.com\",\r\n    projectId: \"dv-inventory\",\r\n    storageBucket: \"dv-inventory.appspot.com\",\r\n    messagingSenderId: \"130062240176\",\r\n    appId: \"1:130062240176:web:ecbca5d29b37d25c6cee75\"\r\n};","import firebase from 'firebase/app'\r\nimport \"firebase/firestore\";\r\nimport { firebaseConfig } from './fireBaseConfig';\r\n\r\nexport function fireBaseDataInit() {\r\n    if (!firebase.apps.length) {\r\n        firebase.initializeApp(firebaseConfig);\r\n    }\r\n}\r\nexport function getPlaces() {\r\n    return firebase.firestore().collection(\"places\").get().then(response => {\r\n        return response.docs.map(x => ({\r\n            id: x.id,\r\n            name: x.data()?.name,\r\n            parts: x.data().parts && x.data().parts.map((part: any) => part.id),\r\n        }));\r\n    });\r\n}\r\nexport function getInventory() {\r\n    return firebase.firestore().collection(\"inventory\").get().then(response => {\r\n        return response.docs.filter(x => (x.data().place !== undefined)).map(x => ({\r\n            id: x.id,\r\n            name: x.data()?.name,\r\n            count: x.data()?.count,\r\n            placeId: x.data().place.id\r\n        }));\r\n    });\r\n\r\n}\r\n\r\nexport function deleteInventory(id: string) {\r\n    return firebase.firestore().collection(\"inventory\").doc(id).delete().then(() => {\r\n        console.info(`Deleted ${id}`);\r\n    });\r\n}\r\n\r\nexport function addInventory(name: string, placeId: string, count: string) {\r\n    return firebase.firestore().collection(\"inventory\").doc().set({\r\n        name,\r\n        count,\r\n        place: firebase.firestore().collection(\"places\").doc(placeId) \r\n    }).then(() => {\r\n        console.info('Added');\r\n    });\r\n}\r\n\r\nexport function editInventory(id: string, name: string, count: string, placePath: string) {\r\n    return firebase.firestore().collection(\"inventory\").doc(id).set({\r\n        name,\r\n        count: count,\r\n        place: firebase.firestore().collection(\"places\").doc(placePath)\r\n    }).then(() => {\r\n        console.info('Edited');\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { cloneDeep } from \"lodash\"\r\nimport { TInventory, TPlacesFilled } from \"../redux/types\"\r\n\r\nexport default function filledNodesChecker(placesArr: TPlacesFilled[], inventoryArr: TInventory[], path?: string[]) {\r\n\r\n    const modifiedArr = cloneDeep(placesArr)\r\n    const tempArr: TPlacesFilled[] = []\r\n\r\n    modifiedArr.map((item) => {\r\n        if (!item.parts) {\r\n            inventoryArr.map((invItem) => {\r\n                if (invItem.placeId === item.id && !item.isFilled) {\r\n                    item.isFilled = true\r\n                    tempArr.push(item)\r\n                }\r\n            })\r\n        }\r\n    })\r\n    tempArr.map((item) => {\r\n        item.path?.map((pathId) => {\r\n            modifiedArr.map((item) => {\r\n                if (item.id === pathId && !item.isFilled) {\r\n                    item.isFilled = true\r\n                    return item\r\n                }\r\n            })\r\n        })\r\n    })\r\n    \r\n    return modifiedArr\r\n}\r\n\r\n","import { TPlacesFlat } from \"../redux/types\"\r\n\r\nexport default function pathCreator(arr: TPlacesFlat[], parentId?: string, history: string[] = []): string[] {\r\n    arr.map((item) => {\r\n        if (item.id === parentId) {\r\n            history.unshift(item.id)\r\n            pathCreator(arr, item.parent, history)\r\n        }\r\n        else return history\r\n    })\r\n    return history\r\n}\r\n","import { cloneDeep } from 'lodash'\r\nimport { TPlacesFlat, TPlacesRaw } from '../redux/types'\r\nimport pathCreator from \"./pathCreator\"\r\n\r\nexport default function findNodesRoots(arr: TPlacesRaw[]): TPlacesFlat[] {\r\n    const arrCopy = cloneDeep(arr) as TPlacesFlat[]\r\n\r\n    arrCopy.filter((item) => item.parts).map((item) => {\r\n        function partsChecker(item: TPlacesFlat) {\r\n            item.parts?.map((part) => {\r\n                setParent(item.id, part)\r\n            })\r\n        }\r\n        partsChecker(item)\r\n    })\r\n\r\n    function setParent(parent: string, itemId: string) {\r\n        arrCopy.map((item) => {\r\n            if (item.id === itemId) {\r\n                item.parent = parent\r\n            }\r\n        })\r\n    }\r\n\r\n    arrCopy.map((item) => {\r\n        item.path = pathCreator(arrCopy, item.id)\r\n    })\r\n    \r\n    return arrCopy \r\n}\r\n","import { cloneDeep } from 'lodash'\r\nimport { TPlacesFilled, TPlacesTree } from '../redux/types'\r\n\r\nexport function toTreeArrReducer(arr: TPlacesFilled[]): TPlacesTree[] {\r\n    const sourceNode = cloneDeep(arr)\r\n    const treeArr = sourceNode.filter((item) => !item.parent) as TPlacesTree[]\r\n    \r\n    arrSplice(treeArr)\r\n\r\n    function arrSplice(arr: TPlacesTree[]) {\r\n        arr.map((item) => {\r\n            if (item.parts) {\r\n                item.parts?.map((partId, index) => {\r\n                   \r\n                    if (typeof partId === 'string') {\r\n                        sourceNode.map((sourceItem: any) => {\r\n                            console.log(sourceItem);\r\n                            \r\n                            if (sourceItem.id === partId && sourceItem ) {\r\n                                item.parts?.splice(index, 1, sourceItem)\r\n                            }\r\n                        })\r\n                        if(item.parts)\r\n                        arrSplice(item.parts)\r\n                    }\r\n                })\r\n            } else {\r\n                return\r\n            }\r\n        })\r\n    }\r\n    return treeArr \r\n}","import { Dispatch } from 'react'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport { getPlaces, getInventory, deleteInventory, addInventory, editInventory} from '../firebase/firebaseApi'\r\nimport filledNodesChecker from '../helpers/filledNodesChecker'\r\nimport findNodesRoots from '../helpers/findNodesRoots'\r\nimport { toTreeArrReducer} from '../helpers/toTreeReducer'\r\nimport { AppStateType } from './store'\r\nimport { TActionTypes, TInventory, ISetInventoryDataAction, TPlacesTree, TPlacesFlat, ISetPendingStatusAction, ISetPlacesDataAction, ISetPlacesFlattenDataAction, ISetSelectedPlaceAction } from './types'\r\n\r\nexport const SET_INVENTORY_DATA = 'SET_INVENTORY_DATA'\r\nexport const SET_PLACES_TREE_DATA = 'SET_PLACES_TREE_DATA'\r\nexport const SET_PLACES_FLATTEN_DATA = 'SET_PLACES_FLATTEN_DATA'\r\nexport const SET_SELECTED_PLACE = 'SET_SELECTED_PLACE'\r\nexport const SET_PENDING_STATUS = 'SET_PENDING_STATUS'\r\n\r\nconst initialState = {\r\n    placesTree: [] as TPlacesTree[],\r\n    placesFlat: [] as TPlacesFlat[],\r\n    inventory: [] as TInventory[],\r\n    selectedPlace: {} as TPlacesTree,\r\n    isPending: false,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const fireBaseDataReducer = (state = initialState, action: TActionTypes): InitialStateType => {\r\n    \r\n    switch (action.type) {\r\n        case SET_PLACES_TREE_DATA: {\r\n            return {\r\n                ...state,\r\n                placesTree: [\r\n                    ...action.data.map((item: TPlacesTree) => item)]\r\n            }\r\n        }\r\n        case SET_PLACES_FLATTEN_DATA: {\r\n            return {\r\n                ...state,\r\n                placesFlat: [\r\n                    ...action.data.map((item: TPlacesFlat) => item)]\r\n            }\r\n        }\r\n        case SET_INVENTORY_DATA: {\r\n            return {\r\n                ...state,\r\n                inventory: [...action.data.map((item: TInventory) => item)]\r\n            }\r\n        }\r\n            \r\n        case SET_SELECTED_PLACE: {\r\n            return {\r\n                ...state,\r\n                selectedPlace: action.place\r\n            }\r\n        }\r\n            \r\n        case SET_PENDING_STATUS: {\r\n            return {\r\n                ...state,\r\n                isPending: action.status\r\n            }\r\n        }\r\n        \r\n        default: return state\r\n    }\r\n}\r\n\r\nexport type TDispatch = Dispatch<TActionTypes | TThunkAction>\r\nexport type TThunkAction = ThunkAction<\r\n    Promise<void>,\r\n    AppStateType,\r\n    unknown,\r\n    TActionTypes>\r\n\r\n    \r\nexport const dataInit = () => async (dispatch: TDispatch) => {\r\n    const responseInv = await getInventory()\r\n    dispatch(setInventoryDataAction(responseInv))\r\n    const response = await getPlaces()\r\n    dispatch(setPlacesFlattenDataAction(findNodesRoots(response)))\r\n    \r\n    dispatch(setPlacesTreeDataAction(toTreeArrReducer(\r\n        filledNodesChecker((findNodesRoots(response)), responseInv)\r\n    )))\r\n}   \r\n\r\nexport const setInventoryThunk = (placesFlat?: TPlacesFlat[]): TThunkAction => async (dispatch: TDispatch) => {\r\n    const responseInv = await getInventory()\r\n    dispatch(setInventoryDataAction(responseInv))\r\n    if (placesFlat) {\r\n        dispatch(setPlacesTreeDataAction(toTreeArrReducer(filledNodesChecker(placesFlat, responseInv))))\r\n    }\r\n}   \r\n\r\nexport const addInventoryItemThunk = (name: string, placeId: string, count: string, placesFlat: TPlacesFlat[]): TThunkAction => async (dispatch: TDispatch) => {\r\n    dispatch(setPendingStatusAction(true))\r\n    await addInventory(name, placeId, count)\r\n    await dispatch(setInventoryThunk(placesFlat))\r\n    dispatch(setPendingStatusAction(false))\r\n}\r\n\r\nexport const editInventoryItemThunk = (id: string, name: string, count: string, placePath: string): TThunkAction => async (dispatch: TDispatch) => {\r\n    dispatch(setPendingStatusAction(true))\r\n    await editInventory(id, name, count, placePath)\r\n    await dispatch(dataInit())\r\n    dispatch(setPendingStatusAction(false))\r\n} \r\n\r\nexport const deleteInventoryItemThunk = (id: string, placesFlat: TPlacesFlat[]): TThunkAction => async (dispatch: TDispatch) => {\r\n    dispatch(setPendingStatusAction(true))\r\n    await deleteInventory(id)\r\n    await dispatch(setInventoryThunk(placesFlat))\r\n    dispatch(setPendingStatusAction(false))\r\n}\r\n\r\n\r\nexport const setPlacesTreeDataAction = (data: TPlacesTree[]): ISetPlacesDataAction => ({ type: SET_PLACES_TREE_DATA, data })\r\n\r\nexport const setPlacesFlattenDataAction = (data: TPlacesFlat[]): ISetPlacesFlattenDataAction => ({ type: SET_PLACES_FLATTEN_DATA, data })\r\n\r\nexport const setInventoryDataAction = (data: TInventory[]): ISetInventoryDataAction => ({ type: SET_INVENTORY_DATA, data })\r\n\r\nexport const setSelectedPlaceAction = (place: TPlacesTree): ISetSelectedPlaceAction => ({ type: SET_SELECTED_PLACE, place })\r\n\r\nexport const setPendingStatusAction = (status: boolean): ISetPendingStatusAction => ({ type: SET_PENDING_STATUS, status })\r\n","import { connect } from 'react-redux'\r\nimport React from 'react'\r\nimport PlacesExplorer from './PlacesExplorer'\r\nimport { setSelectedPlaceAction} from '../../redux/firebaseDataReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { TPlacesTree } from '../../redux/types'\r\n\r\ntype TMapState = {\r\n    placesTree: TPlacesTree[]\r\n    selectedPlace: TPlacesTree\r\n}\r\n\r\ntype TMapDispatch = {\r\n    setSelectedPlaceAction: (place: TPlacesTree) => void\r\n}\r\n\r\ntype TProps = TMapState & TMapDispatch\r\n\r\nconst PlacesExplorerContainer: React.FC<TProps> = (props) => {\r\n   \r\n    return (\r\n        <PlacesExplorer placesTree={props.placesTree}\r\n            selectedPlace={props.selectedPlace}\r\n            setSelectedPlaceAction={props.setSelectedPlaceAction} />\r\n    )  \r\n}\r\n\r\n\r\nconst mapState = (state: AppStateType): TMapState => {\r\n    return ({\r\n        placesTree: state.fireBase.placesTree,\r\n        selectedPlace: state.fireBase.selectedPlace,\r\n    })\r\n}\r\n\r\n\r\nexport default connect<TMapState, TMapDispatch, {}, AppStateType>(mapState, { setSelectedPlaceAction })(PlacesExplorerContainer)","export default __webpack_public_path__ + \"static/media/add.975f2872.svg\";","import React from 'react'\r\nimport style from './InventoryActionButton.module.scss'\r\n\r\ntype TProps = {\r\n    icon: string\r\n    role: string\r\n    btnClickHandler: (role: string) => void\r\n}\r\n\r\nconst InventoryActionButton: React.FC<TProps> = (props) => {\r\n    function clickHandler() {\r\n        props.btnClickHandler(props.role)\r\n    }\r\n    return (\r\n        <div onClick={clickHandler} className={`${style.icon}`}>\r\n            <img src={props.icon} alt={`${props.icon}`} />\r\n        </div>\r\n    )\r\n    \r\n}\r\nexport default InventoryActionButton","export default __webpack_public_path__ + \"static/media/edit.31d9b074.svg\";","export default __webpack_public_path__ + \"static/media/delete.838f7bdf.svg\";","import React, { FormEvent, useEffect, useState } from 'react'\r\nimport { TInventory, TPlacesFlat } from '../../../redux/types'\r\nimport style from './InventoryForm.module.scss'\r\n\r\ntype TProps = { \r\n    placesFlat?: TPlacesFlat[]\r\n    inventory?: TInventory\r\n    path?: string[]\r\n    editMode?: boolean \r\n    isPending?: boolean\r\n    selectedPlaceId?: string \r\n    role: string\r\n    setPendingStatus?: React.Dispatch<React.SetStateAction<boolean>>\r\n    setEditMode?: React.Dispatch<React.SetStateAction<boolean>>\r\n    addInventoryItem?: (name: string, placeId: string, count: string, placesFlat: TPlacesFlat[]) => void \r\n    editInventoryItem?: (id: string, name: string, count: string, placePath: string) => void\r\n}\r\n\r\nconst InventoryForm: React.FC<TProps> = (props) => {\r\n    const [name, setName] = useState('')\r\n    const [count, setCount] = useState('')\r\n    const [nameValid, setNameValid] = useState('default')\r\n    const [countValid, setCountValid] = useState('default')\r\n    const [formClass, setFormClass] = useState(style.form)\r\n\r\n    useEffect(() => {\r\n        if (props.role === 'listItem' && typeof props.inventory !== 'undefined'){\r\n            setName(props.inventory.name)\r\n            setCount(`${props.inventory.count}`)\r\n            setFormClass(`${style.form} ${style.listItemParamsWrapper}`)\r\n        }\r\n\r\n        if (props.role === 'modal')\r\n            setFormClass(`${style.form} ${style.modalWrapper}`)\r\n            \r\n    }, [props.editMode, props.inventory?.name, props.inventory?.count])\r\n    \r\n    function validateName(value: string): string {\r\n        return value.trim() && value.match(/[a-zа-яё]/i)\r\n            ? 'valid'\r\n            : 'notValid'\r\n    }\r\n\r\n    function validateCount(value: string): string {\r\n        return value.match(/^[1-9]\\d*$/)\r\n            ? 'valid'\r\n            : 'notValid'\r\n    }\r\n\r\n    function handleInputChange(e: React.FormEvent<HTMLInputElement>) {\r\n        if (e.currentTarget.name === 'name') {\r\n            setName(e.currentTarget.value)\r\n            setNameValid(validateName(e.currentTarget.value))\r\n        }\r\n            \r\n        if (e.currentTarget.name === 'count') {\r\n            setCount(e.currentTarget.value)\r\n            setCountValid(validateCount(e.currentTarget.value))\r\n        }\r\n    }\r\n    \r\n    function onSubmitingForm(e: FormEvent<HTMLFormElement>) {\r\n        e.preventDefault()\r\n        setNameValid(validateName(name))\r\n        setCountValid(validateCount(count))\r\n        \r\n        if (nameValid === 'notValid') setName('')\r\n        \r\n        if (countValid === 'notValid') setCount('')\r\n\r\n        if (props.role === 'modal' && props.addInventoryItem && props.selectedPlaceId && props.placesFlat) {\r\n            if (countValid === 'valid' && nameValid === 'valid') {\r\n                props.addInventoryItem(name, props.selectedPlaceId, count, props.placesFlat)\r\n                setCount('')\r\n                setName('')\r\n            }\r\n        }\r\n        if (props.role === 'listItem' && props.inventory && props.path && props.setPendingStatus && props.editInventoryItem && props.setEditMode) {\r\n            if (countValid === 'valid' || countValid === 'default'\r\n                && nameValid === 'valid' || nameValid === 'default') {\r\n                props.setPendingStatus(true)\r\n                props.editInventoryItem(props.inventory.id, name, count, props.path?.join('/'))\r\n                props.setEditMode(true)\r\n            }\r\n        }\r\n    }\r\n    function closeEdit() {\r\n        setNameValid('default')\r\n        setCountValid('default')\r\n        if (props.setEditMode)\r\n        props.setEditMode(true)\r\n    }\r\n    return (\r\n        <form className={formClass}\r\n            onSubmit={onSubmitingForm}>\r\n            <div className={`${style.inputWrapper} ${nameValid === 'notValid' && style.error}`}>\r\n                <label>Наименование</label>\r\n                <div className={`${style.textWrapper} ${props.editMode && style.disabled}`}>\r\n                    <input type=\"text\"\r\n                        name=\"name\"\r\n                        placeholder=\"Введите наименование\"\r\n                        onChange={handleInputChange}\r\n                        onBlur={handleInputChange}\r\n                        value={name}\r\n                        autoComplete='off'\r\n                        disabled={props.editMode}>\r\n                    </input>\r\n                    {props.editMode && <div className={style.fullText}>{name}</div>}\r\n                </div>\r\n            </div>\r\n            <div className={`${style.inputWrapper} ${countValid === 'notValid' && style.error}`}>\r\n                <label>Количество</label>\r\n                <input type=\"text\"\r\n                    name=\"count\"\r\n                    placeholder=\"Введите число\"\r\n                    onChange={handleInputChange}\r\n                    onBlur={handleInputChange}\r\n                    value={count}\r\n                    autoComplete=\"off\"\r\n                    disabled={props.editMode} />\r\n            </div>\r\n            <div className={style.buttonsWrapper}>\r\n                {!props.editMode && <button type=\"submit\" className={`${style.formButton} ${style.submit} `}>подтвердить</button>}\r\n                {!props.editMode && props.role === 'listItem' &&\r\n                    <button type=\"button\" onClick={closeEdit} className={`${style.formButton} ${style.cancel}`}>отменить</button>}\r\n            </div>\r\n            \r\n           \r\n        </form>\r\n    )\r\n    \r\n}\r\nexport default InventoryForm","import React, { useEffect, useState } from 'react'\r\nimport style from './InventoryListItem.module.scss'\r\nimport editIcon from '../../../assets/icons/edit.svg'\r\nimport deleteIcon from '../../../assets/icons/delete.svg'\r\nimport InventoryActionButton  from './inventoryActionButton/InventoryActionButton'\r\nimport InventoryForm from '../inventoryForm/InventoryForm'\r\nimport Spinner from '../../spinner/Spinner'\r\nimport { TInventory, TPlacesTree } from '../../../redux/types'\r\n\r\ntype TProps = {\r\n    inventory: TInventory\r\n    selectedPlace: TPlacesTree\r\n    editModeId: string\r\n    isPending: boolean\r\n    editInventoryItem: (id: string, name: string, count: string, placePath: string) => void\r\n    btnClickHandler: (role: string, inventoryId?: string) => void\r\n}\r\n\r\nconst InventoryListItem: React.FC <TProps> = (props) => {\r\n    const [editMode, setEditModeId] = useState(true)\r\n    const [pendingStatus, setPendingStatus] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (!props.isPending) setPendingStatus(false)\r\n    }, [props.isPending])\r\n\r\n    function btnClickHandler(role: string) {\r\n        if (role === 'edit') setEditModeId(!editMode)\r\n        if (role === 'delete') {\r\n            setPendingStatus(true)\r\n            props.btnClickHandler(role, props.inventory.id)\r\n        }\r\n    }\r\n    \r\n    return ( \r\n        <li className={style.inventoryListItemWrapper}>\r\n            <div className={style.inventoryListItem}>\r\n                <InventoryForm role={'listItem'}\r\n                    editInventoryItem={props.editInventoryItem}\r\n                    inventory={props.inventory}\r\n                    path={props.selectedPlace.path}\r\n                    editMode={editMode}\r\n                    setEditMode={setEditModeId}\r\n                    isPending={props.isPending}\r\n                    setPendingStatus={setPendingStatus}/>\r\n                \r\n                {!props.selectedPlace.parts && <div className={style.iconWrapper}>\r\n                    <InventoryActionButton role={'edit'} icon={editIcon} btnClickHandler={btnClickHandler}/>\r\n                    <InventoryActionButton role={'delete'}\r\n                        icon={deleteIcon}\r\n                        btnClickHandler={btnClickHandler}/>\r\n                </div>}\r\n            </div>\r\n            {pendingStatus && <div className={style.spinnerWrapper}>\r\n                <Spinner width={80}/>\r\n            </div>}\r\n        </li>\r\n    )\r\n    \r\n}\r\nexport default InventoryListItem","import React from 'react'\r\nimport { TPlacesFlat } from '../../../redux/types'\r\nimport Spinner from '../../spinner/Spinner'\r\nimport InventoryForm from '../inventoryForm/InventoryForm'\r\nimport style from './AddItemModal.module.scss'\r\n\r\ntype TProps = {\r\n    isPending: boolean\r\n    placesFlat: TPlacesFlat[]\r\n    selectedPlaceId: string \r\n    modalToggle: () => void\r\n    addInventoryItem: (name: string, placeId: string, count: string, placesFlat: TPlacesFlat[]) => void\r\n}\r\n\r\nconst AddItemModal: React.FC<TProps> = (props) => {\r\n    \r\n    function closeModal(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\r\n        if(e.target === e.currentTarget) props.modalToggle()\r\n    }\r\n    return (\r\n        <div className={style.modalWrapper}\r\n            onClick={closeModal}>\r\n\r\n            <div className={style.modal}>\r\n                {props.isPending && <div className={style.spinnerWrapper}>\r\n                    <Spinner width={100} />\r\n                </div>}\r\n                <h4>Добавление оборудования</h4>\r\n                <InventoryForm\r\n                    role={'modal'}\r\n                    selectedPlaceId={props.selectedPlaceId}\r\n                    addInventoryItem={props.addInventoryItem}\r\n                    placesFlat={props.placesFlat}/>\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n}\r\nexport default AddItemModal","import React, { useState } from 'react'\r\nimport style from './MainView.module.scss'\r\nimport addIcon from '../../assets/icons/add.svg'\r\nimport InventoryActionButton from './inventoryListItem/inventoryActionButton/InventoryActionButton'\r\nimport InventoryListItem from './inventoryListItem/InventoryListItem'\r\nimport AddItemModal from './AddItemModal/AddItemModal'\r\nimport { TInventory, TPlacesTree, TPlacesFlat} from '../../redux/types'\r\n\r\ntype TProps = {\r\n    inventory: TInventory[]\r\n    selectedPlace: TPlacesTree\r\n    placesFlat: TPlacesFlat[]\r\n    isPending: boolean\r\n    editInventoryItem: (id: string, name: string, count: string, placePath: string) => void\r\n    deleteInventoryItem: (id: string, placesFlat: TPlacesFlat[]) => void\r\n    addInventoryItem: (name: string, placeId: string, count: string, placesFlat: TPlacesFlat[]) => void\r\n}\r\n\r\nconst MainView: React.FC<TProps> = (props) => {\r\n    const [isModalOpen, setModalState] = useState(false)\r\n    const [editModeId, setEditModeId] = useState('')\r\n    \r\n    function modalToggle(): void {\r\n        setModalState(!isModalOpen)\r\n    }\r\n    function editModeToggle(inventoryId: string): void {\r\n        \r\n        setEditModeId(inventoryId)\r\n       \r\n    }\r\n    function btnClickHandler(role: string, inventoryId: string = ''): void {\r\n        \r\n        switch (role) {\r\n            case 'edit': editModeToggle(inventoryId)\r\n                break\r\n            case 'delete': props.deleteInventoryItem(inventoryId, props.placesFlat) \r\n                break\r\n            case 'add': modalToggle()\r\n                break\r\n                \r\n            default: return\r\n        }\r\n    }\r\n    return (\r\n        <div className={`${style.viewComponent} ${isModalOpen && style.modalOpened}`}>\r\n            <h1>Список оборудования</h1>\r\n            <hr />\r\n            {!props.selectedPlace.id && <span className={style.info}>Выберите помещение в меню слева, чтобы поспотреть имеющееся в ней оборудование</span>}\r\n            {props.selectedPlace.id &&\r\n                <section className={style.inventoryListWrapper}>\r\n                <div className={style.sectionTopRow}>\r\n                    <div className={`${style.inventoryListHeader} ${style.inventoryListItem}`}>\r\n                        <h4>{props.selectedPlace.name}</h4>\r\n                    </div>\r\n                    {props.selectedPlace.id && !props.selectedPlace.parts &&\r\n                    <InventoryActionButton\r\n                        icon={addIcon}\r\n                        role={'add'}\r\n                        btnClickHandler={btnClickHandler} />}\r\n                </div>\r\n                <ul className={style.inventoryList}>\r\n                    {props.inventory.map((item) => {\r\n                        if (props.selectedPlace.id) {\r\n                            return <InventoryListItem\r\n                                editInventoryItem={props.editInventoryItem}\r\n                                btnClickHandler={btnClickHandler}\r\n                                key={item.id}\r\n                                inventory={item}\r\n                                selectedPlace={props.selectedPlace}\r\n                                editModeId={editModeId}\r\n                                isPending={props.isPending}/>\r\n                        }\r\n                    })}\r\n                </ul>\r\n            </section>}\r\n            {isModalOpen && <AddItemModal\r\n                modalToggle={modalToggle}\r\n                addInventoryItem={props.addInventoryItem}\r\n                selectedPlaceId={props.selectedPlace.id}\r\n                isPending={props.isPending}\r\n                placesFlat={props.placesFlat}/>}\r\n        </div>\r\n    )\r\n    \r\n}\r\nexport default React.memo(MainView)","import React, { useCallback, useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport MainView from './MainView'\r\nimport { editInventoryItemThunk, deleteInventoryItemThunk, addInventoryItemThunk }from '../../redux/firebaseDataReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { TInventory, TPlacesFlat, TPlacesTree} from '../../redux/types'\r\n\r\n\r\ntype TMapState = {\r\n    inventory: TInventory[]\r\n    selectedPlace: TPlacesTree\r\n    placesFlat: TPlacesFlat[]\r\n    isPending: boolean\r\n}\r\ntype TMapDispatch = {\r\n    editInventoryItemThunk: (id: string, name: string, count: string, placePath: string) => void\r\n    deleteInventoryItemThunk: (id: string, placesFlat: TPlacesFlat[]) => void\r\n    addInventoryItemThunk: (name: string, placeId: string, count: string, placesFlat: TPlacesFlat[]) => void\r\n}\r\ntype TProps = TMapState & TMapDispatch\r\n\r\n\r\nconst MainViewContainer: React.FC<TProps> = (props) => {\r\n    const [currentInventory, setCurrentInventory] = useState<Array<TInventory>>([])\r\n\r\n    useEffect(() => {\r\n        setCurrentInventory((): TInventory[] => {\r\n            const currentPlaceInventory: TInventory[] = []\r\n            props.inventory.map((invItem) => {\r\n                if (props.selectedPlace.parts) {\r\n                    deepChildsSearch(props.selectedPlace.parts)\r\n                        .map((item) => {\r\n                            if (item.id === invItem.placeId) {\r\n                                currentPlaceInventory.push(invItem)\r\n                            }\r\n                        })\r\n                } else if (invItem.placeId === props.selectedPlace.id) {\r\n                    currentPlaceInventory.push(invItem)\r\n                }\r\n            })\r\n            \r\n            return currentPlaceInventory\r\n        })\r\n        \r\n    }, [props.selectedPlace, props.inventory])\r\n\r\n    const deepChildsSearch = useCallback(\r\n        (arr: TPlacesTree[], nodeChildsArr: TPlacesTree[] = []) => {\r\n            arr.map((item) => {\r\n                if (!item.parts) {\r\n                    nodeChildsArr.push(item)\r\n                }\r\n                if (item.parts) {\r\n                    deepChildsSearch(item.parts, nodeChildsArr)\r\n                }\r\n            })\r\n            return nodeChildsArr\r\n        }, [])\r\n\r\n    return (\r\n        <MainView inventory={currentInventory}\r\n            selectedPlace={props.selectedPlace}\r\n            isPending={props.isPending}\r\n            placesFlat={props.placesFlat}\r\n            editInventoryItem={props.editInventoryItemThunk}\r\n            deleteInventoryItem={props.deleteInventoryItemThunk}\r\n            addInventoryItem={props.addInventoryItemThunk}\r\n        />\r\n        \r\n        \r\n    )\r\n}\r\nfunction mapState(state: AppStateType): TMapState {\r\n    \r\n    return ({\r\n        inventory: state.fireBase.inventory,\r\n        selectedPlace: state.fireBase.selectedPlace,\r\n        placesFlat: state.fireBase.placesFlat,\r\n        isPending: state.fireBase.isPending,\r\n    })\r\n}\r\n\r\nexport default connect<TMapState, TMapDispatch, {}, AppStateType>(mapState, { editInventoryItemThunk, deleteInventoryItemThunk, addInventoryItemThunk })(MainViewContainer)","import { type } from 'os';\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport './App.scss';\nimport ExplorerComponentContainer from './components/explorer/PlacesExplorerContainer';\nimport MainViewComponentContainer from './components/mainView/MainViewContainer';\nimport { fireBaseDataInit } from './firebase/firebaseApi';\nimport { dataInit, TDispatch } from './redux/firebaseDataReducer';\nimport { AppStateType } from './redux/store';\n\ntype TMapDispatch = {\n  dataInit: () => void\n}\ntype TProps = TMapDispatch\nconst App: React.FC<TProps> = (props) => {\n  useEffect(() => {\n    fireBaseDataInit()\n    props.dataInit()\n  }, [])\n\n  return (\n    <div className='container'>\n      <ExplorerComponentContainer/>\n      <MainViewComponentContainer/>\n    </div>\n  );\n}\n\nexport default connect<{}, TMapDispatch, unknown, AppStateType>(() => { return {} }, { dataInit})(App)\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport { fireBaseDataReducer } from './firebaseDataReducer'\r\nimport thunk from 'redux-thunk';\r\n\r\n\r\nconst reducers = combineReducers({\r\n    fireBase: fireBaseDataReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux'\nReactDOM.render(\n\n\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"InventoryForm_form__2U266\",\"modalWrapper\":\"InventoryForm_modalWrapper__23J_Q\",\"inputWrapper\":\"InventoryForm_inputWrapper__3aldT\",\"error\":\"InventoryForm_error__39Omt\",\"buttonsWrapper\":\"InventoryForm_buttonsWrapper__JP-US\",\"listItemParamsWrapper\":\"InventoryForm_listItemParamsWrapper__3xySU\",\"textWrapper\":\"InventoryForm_textWrapper__3rok5\",\"disabled\":\"InventoryForm_disabled__19t2Q\",\"fullText\":\"InventoryForm_fullText__ze19X\",\"formButton\":\"InventoryForm_formButton__C3Wa-\",\"submit\":\"InventoryForm_submit__3UuNU\",\"cancel\":\"InventoryForm_cancel__3W87D\"};"],"sourceRoot":""}