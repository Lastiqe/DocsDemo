{"version":3,"sources":["components/explorer/PlacesExplorer.module.scss","components/mainView/MainView.module.scss","components/mainView/inventoryListItem/InventoryListItem.module.scss","components/mainView/AddItemModal/AddItemModal.module.scss","components/spinner/Spinner.module.scss","components/mainView/inventoryListItem/inventoryActionButton/InventoryActionButton.module.scss","components/explorer/explorerTree/RecrusiveTree.module.scss","assets/icons/angle-arrow-down.svg","components/explorer/explorerTree/RecrusiveTree.tsx","assets/gifs/Blocks-1s-207px.svg","components/spinner/Spinner.tsx","assets/icons/clear-cross.svg","assets/icons/burger-menu.svg","components/explorer/PlacesExplorer.tsx","firebase/fireBaseConfig.ts","firebase/firebaseApi.ts","helpers/filledNodesChecker.ts","helpers/pathCreator.ts","helpers/findNodesRoots.ts","helpers/toTreeReducer.ts","redux/firebaseDataReducer.ts","components/explorer/PlacesExplorerContainer.tsx","assets/icons/add.svg","assets/icons/edit.svg","assets/icons/delete.svg","components/mainView/inventoryForm/InventoryForm.tsx","components/mainView/inventoryListItem/inventoryActionButton/InventoryActionButton.tsx","components/mainView/inventoryListItem/InventoryListItem.tsx","components/mainView/AddItemModal/AddItemModal.tsx","components/mainView/MainView.tsx","components/mainView/MainViewContainer.tsx","App.tsx","redux/store.ts","index.tsx","components/mainView/inventoryForm/InventoryForm.module.scss"],"names":["module","exports","RecrusiveTree","props","wrapperClassesOpened","style","detailsWrapper","wrapperClassesAnimated","detailsWrapperAnimated","wrapperClassesClosed","closed","arrowIconClosed","arrowIcon","arrowIconOpened","opened","listItemSelected","selected","useState","isOpened","setNodeState","wrapperClasses","setWrapperClasses","arrowIconClasses","setArrowIconClasses","openNode","setSelectedPlaceAction","place","isFirstRun","useRef","renderTree","node","parts","selectedPlace","map","item1","id","useEffect","current","setTimeout","className","treeLi","nodeLi","iconWrapper","onClick","src","alt","name","isFilled","filled","item","React","memo","Spinner","loaderWrapper","loader","width","PlacesExplorer","isMobileOpen","setMobileState","toggleMenu","explorer","openedMobile","explorerHeader","explorerBody","placesTree","length","spinnerWrapper","menuCloseButtonWrapper","clearCrossIcon","menuOpenButtonWrapper","menuOpened","burgerMenuIcon","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","getInventory","firebase","firestore","collection","get","then","response","docs","filter","x","undefined","data","count","placeId","deleteInventory","doc","delete","addInventory","set","editInventory","placePath","filledNodesChecker","placesArr","inventoryArr","path","modifiedArr","cloneDeep","tempArr","invItem","push","pathId","pathCreator","arr","parentId","history","unshift","parent","findNodesRoots","arrCopy","part","itemId","partsChecker","toTreeArrReducer","sourceNode","treeArr","arrSplice","partId","index","sourceItem","splice","SET_INVENTORY_DATA","SET_PLACES_TREE_DATA","SET_PLACES_FLATTEN_DATA","SET_SELECTED_PLACE","SET_PENDING_STATUS","initialState","placesFlat","inventory","isPending","dataInit","dispatch","a","responseInv","setInventoryDataAction","setPlacesFlattenDataAction","setPlacesTreeDataAction","setInventoryThunk","type","setPendingStatusAction","status","connect","state","fireBase","InventoryForm","setName","setCount","nameValid","setNameValid","countValid","setCountValid","form","formClass","setFormClass","validateName","value","trim","match","validateCount","handleInputChange","e","currentTarget","role","listItemParamsWrapper","modalWrapper","editMode","onSubmit","preventDefault","addInventoryItem","selectedPlaceId","setPendingStatus","editInventoryItem","setEditMode","join","inputWrapper","error","textWrapper","disabled","placeholder","onChange","onBlur","autoComplete","fullText","buttonsWrapper","formButton","submit","cancel","ActionButton","btnClickHandler","icon","InventoryListItem","setEditModeId","pendingStatus","inventoryListItemWrapper","inventoryListItem","editIcon","deleteIcon","AddItemModal","target","modalToggle","modal","MainView","isModalOpen","setModalState","editModeId","editModeToggle","inventoryId","deleteInventoryItem","viewComponent","modalOpened","info","inventoryListWrapper","sectionTopRow","inventoryListHeader","addIcon","inventoryList","editInventoryItemThunk","deleteInventoryItemThunk","addInventoryItemThunk","currentInventory","setCurrentInventory","currentPlaceInventory","deepChildsSearch","useCallback","nodeChildsArr","apps","initializeApp","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f45d715d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"explorer\":\"PlacesExplorer_explorer__2SQiA\",\"openedMobile\":\"PlacesExplorer_openedMobile__3L8kc\",\"menuOpenButtonWrapper\":\"PlacesExplorer_menuOpenButtonWrapper__X7jgQ\",\"menuOpened\":\"PlacesExplorer_menuOpened__4Nd4H\",\"menuCloseButtonWrapper\":\"PlacesExplorer_menuCloseButtonWrapper__35Q09\",\"explorerHeader\":\"PlacesExplorer_explorerHeader__2yFiQ\",\"explorerBody\":\"PlacesExplorer_explorerBody__ArcXN\",\"placesTree\":\"PlacesExplorer_placesTree__kuQ1H\",\"spinnerWrapper\":\"PlacesExplorer_spinnerWrapper__2k5vr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"viewComponent\":\"MainView_viewComponent__jPp2U\",\"modalOpened\":\"MainView_modalOpened__2sRQb\",\"info\":\"MainView_info__3LFY5\",\"inventoryListWrapper\":\"MainView_inventoryListWrapper__19dof\",\"sectionTopRow\":\"MainView_sectionTopRow__2HwGN\",\"inventoryListHeader\":\"MainView_inventoryListHeader__1EHNZ\",\"inventoryList\":\"MainView_inventoryList__U92cL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inventoryListItemWrapper\":\"InventoryListItem_inventoryListItemWrapper__QBSkm\",\"inventoryListItem\":\"InventoryListItem_inventoryListItem__3YmUJ\",\"iconWrapper\":\"InventoryListItem_iconWrapper__gOOhw\",\"spinnerWrapper\":\"InventoryListItem_spinnerWrapper__2Zmel\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalWrapper\":\"AddItemModal_modalWrapper__2m9yD\",\"modal\":\"AddItemModal_modal__2QLio\",\"spinnerWrapper\":\"AddItemModal_spinnerWrapper__2HpYO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loaderWrapper\":\"Spinner_loaderWrapper__2y39y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon\":\"InventoryActionButton_icon__3H3id\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nodeLi\":\"RecrusiveTree_nodeLi__2FBsy\",\"treeLi\":\"RecrusiveTree_treeLi__18et9\",\"name\":\"RecrusiveTree_name__1pEIx\",\"selected\":\"RecrusiveTree_selected__TeRY7\",\"filled\":\"RecrusiveTree_filled__3uOCt\",\"iconWrapper\":\"RecrusiveTree_iconWrapper__2Z6Oa\",\"arrowIcon\":\"RecrusiveTree_arrowIcon__1zb4k\",\"opened\":\"RecrusiveTree_opened__Al9Sf\",\"detailsWrapper\":\"RecrusiveTree_detailsWrapper__2vdYu\",\"closed\":\"RecrusiveTree_closed__37Ehs\",\"detailsWrapperAnimated\":\"RecrusiveTree_detailsWrapperAnimated__3pWpT\"};","export default __webpack_public_path__ + \"static/media/angle-arrow-down.a8dbb320.svg\";","import React, { useEffect, useRef, useState } from 'react'\r\nimport style from './RecrusiveTree.module.scss'\r\nimport arrowIcon from '../../../assets/icons/angle-arrow-down.svg'\r\nimport { TPlacesTree } from '../../../redux/types'\r\n\r\ntype TProps = {\r\n    place: TPlacesTree\r\n    selectedPlace: TPlacesTree\r\n    setSelectedPlaceAction: (place: TPlacesTree) => void\r\n}\r\n\r\nconst RecrusiveTree: React.FC<TProps> = (props) => {\r\n    const wrapperClassesOpened = `${style.detailsWrapper}`\r\n    const wrapperClassesAnimated = `${style.detailsWrapper} ${style.detailsWrapperAnimated}`\r\n    const wrapperClassesClosed = `${style.detailsWrapper} ${style.closed}`\r\n\r\n    const arrowIconClosed = `${style.arrowIcon}`\r\n    const arrowIconOpened = `${style.arrowIcon} ${style.opened}`\r\n    const listItemSelected = `${style.selected}`\r\n\r\n    const [isOpened, setNodeState] = useState(false)\r\n    const [wrapperClasses, setWrapperClasses] = useState(wrapperClassesClosed)\r\n    const [arrowIconClasses, setArrowIconClasses] = useState(arrowIconClosed)\r\n    \r\n    function openNode() {\r\n        setNodeState(true)\r\n        props.setSelectedPlaceAction(props.place)\r\n    }\r\n    const isFirstRun = useRef(true);\r\n    useEffect(() => {\r\n        if (isFirstRun.current) {\r\n            isFirstRun.current = false;\r\n            return\r\n        }\r\n        if (!isOpened) {\r\n            setArrowIconClasses(arrowIconClosed)\r\n            setWrapperClasses(wrapperClassesOpened)\r\n            setTimeout(() => {\r\n                setWrapperClasses(wrapperClassesClosed)\r\n            }, 150)\r\n        }\r\n        if (isOpened) {\r\n            setArrowIconClasses(arrowIconOpened)\r\n            setWrapperClasses(wrapperClassesOpened)\r\n            setTimeout(() => {\r\n                setWrapperClasses(wrapperClassesAnimated)\r\n            }, 150)\r\n        }\r\n    }, [!isOpened])\r\n\r\n    function nodeToggle(): void {\r\n        setNodeState(!isOpened)\r\n    }\r\n\r\n    function renderTree(node: TPlacesTree) {\r\n        if (node.parts) {\r\n            return (\r\n                <RecrusiveTree\r\n                    key={node.id}\r\n                    place={node}\r\n                    selectedPlace={props.selectedPlace}\r\n                    setSelectedPlaceAction={props.setSelectedPlaceAction}>\r\n                    {node.parts.map((item1) => renderTree(item1))}\r\n            </RecrusiveTree>)\r\n        } else {\r\n\r\n            return <RecrusiveTree key={node.id}\r\n                setSelectedPlaceAction={props.setSelectedPlaceAction}\r\n                selectedPlace={props.selectedPlace}\r\n                place={node}/>\r\n        }\r\n    }\r\n    \r\n    return (\r\n        props.place.parts\r\n            ? <div className={`${style.treeLi} ${style.nodeLi}`}>\r\n                <span className={style.iconWrapper} onClick={nodeToggle}>\r\n                    <img src={arrowIcon}\r\n                        className={arrowIconClasses}\r\n                        alt=\"arrow\" />\r\n                </span>\r\n                <span className={`${style.name} ${props.selectedPlace.id === props.place.id ? listItemSelected : ''}`} onClick={openNode}>{props.place.name}\r\n                    {props.place.isFilled && <span className={style.filled}></span>}\r\n                </span>\r\n                <div className={wrapperClasses}>\r\n                    {props.place.parts.map((item) => renderTree(item))}\r\n                </div>\r\n            </div>\r\n            : <div className={style.treeLi} >\r\n                <span className={`${style.name} ${props.selectedPlace.id === props.place.id ? listItemSelected : ''} `} onClick={openNode}>{props.place.name}\r\n                    {props.place.isFilled && <span className={style.filled}></span>}\r\n                </span>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(RecrusiveTree)","export default __webpack_public_path__ + \"static/media/Blocks-1s-207px.3d4370cf.svg\";","import React from 'react'\r\nimport style from './Spinner.module.scss'\r\nimport loader from '../../assets/gifs/Blocks-1s-207px.svg'\r\n\r\ntype TProps = {\r\n    width: number\r\n}\r\n\r\nconst Spinner: React.FC<TProps> = (props) => {\r\n   \r\n    return (\r\n        <div className={style.loaderWrapper}>\r\n            <img src={loader}\r\n                width={props.width}\r\n                className={style.loader} />\r\n        </div>\r\n    )\r\n}\r\nexport default Spinner","export default __webpack_public_path__ + \"static/media/clear-cross.e4e5d624.svg\";","export default __webpack_public_path__ + \"static/media/burger-menu.69877d2f.svg\";","import React, { useState } from 'react'\r\nimport style from './PlacesExplorer.module.scss'\r\nimport RecrusiveTreeComponent from './explorerTree/RecrusiveTree';\r\nimport Spinner from '../spinner/Spinner';\r\nimport { TPlacesTree } from '../../redux/types';\r\nimport clearCrossIcon from '../../assets/icons/clear-cross.svg'\r\nimport burgerMenuIcon from '../../assets/icons/burger-menu.svg'\r\n\r\ntype TProps = {\r\n    placesTree: TPlacesTree[]\r\n    selectedPlace: TPlacesTree\r\n    setSelectedPlaceAction: (place: TPlacesTree) => void\r\n}\r\n\r\nconst PlacesExplorer: React.FC<TProps> = (props) => {\r\n    const [isMobileOpen, setMobileState] = useState(false)\r\n\r\n    function toggleMenu(): void {\r\n        setMobileState(!isMobileOpen)\r\n    }\r\n\r\n    return (\r\n        <div className={`${style.explorer} ${isMobileOpen && style.openedMobile}`}>\r\n            <div className={style.explorerHeader}>\r\n                <h1>Помещения</h1>\r\n            </div>\r\n            <div className={style.explorerBody}>\r\n                {props.placesTree.length\r\n                    ? <div className={style.placesTree}>\r\n                            {props.placesTree.map((item) => {\r\n                            return <RecrusiveTreeComponent\r\n                                setSelectedPlaceAction={props.setSelectedPlaceAction}\r\n                                selectedPlace={props.selectedPlace}\r\n                                place={item}\r\n                                key={item.id} />\r\n                        })}</div>\r\n                    : <div className={style.spinnerWrapper}><Spinner width={150} /></div>}\r\n            </div>\r\n            <div onClick={toggleMenu} className={style.menuCloseButtonWrapper}>\r\n                <img src={clearCrossIcon} alt=\"close-menu\" width=\"40\"/>\r\n            </div>\r\n            <div onClick={toggleMenu} className={`${style.menuOpenButtonWrapper} ${isMobileOpen && style.menuOpened}`}>\r\n                <img src={burgerMenuIcon} alt=\"open-menu\" width=\"40\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n}\r\nexport default PlacesExplorer","export const firebaseConfig = {\r\n    apiKey: \"AIzaSyD6DnGbVfdJlDJ_pEOUfDfTDJrA8j3lIs8\",\r\n    authDomain: \"dv-inventory.firebaseapp.com\",\r\n    databaseURL: \"https://dv-inventory.firebaseio.com\",\r\n    projectId: \"dv-inventory\",\r\n    storageBucket: \"dv-inventory.appspot.com\",\r\n    messagingSenderId: \"130062240176\",\r\n    appId: \"1:130062240176:web:ecbca5d29b37d25c6cee75\"\r\n};","import firebase from 'firebase/app'\r\nimport \"firebase/firestore\";\r\nimport { firebaseConfig } from './fireBaseConfig';\r\n\r\nexport function fireBaseDataInit() {\r\n    if (!firebase.apps.length) {\r\n        firebase.initializeApp(firebaseConfig);\r\n    }\r\n}\r\nexport function getPlaces() {\r\n    return firebase.firestore().collection(\"places\").get().then(response => {\r\n        return response.docs.map(x => ({\r\n            id: x.id,\r\n            name: x.data()?.name,\r\n            parts: x.data().parts && x.data().parts.map((part: any) => part.id),\r\n        }));\r\n    });\r\n}\r\nexport function getInventory() {\r\n    return firebase.firestore().collection(\"inventory\").get().then(response => {\r\n        return response.docs.filter(x => (x.data().place !== undefined)).map(x => ({\r\n            id: x.id,\r\n            name: x.data()?.name,\r\n            count: x.data()?.count,\r\n            placeId: x.data().place.id\r\n        }));\r\n    });\r\n\r\n}\r\n\r\nexport function deleteInventory(id: string) {\r\n    return firebase.firestore().collection(\"inventory\").doc(id).delete().then(() => {\r\n    });\r\n}\r\n\r\nexport function addInventory(name: string, placeId: string, count: string) {\r\n    return firebase.firestore().collection(\"inventory\").doc().set({\r\n        name,\r\n        count,\r\n        place: firebase.firestore().collection(\"places\").doc(placeId) \r\n    }).then(() => {\r\n    });\r\n}\r\n\r\nexport function editInventory(id: string, name: string, count: string, placePath: string) {\r\n    return firebase.firestore().collection(\"inventory\").doc(id).set({\r\n        name,\r\n        count: count,\r\n        place: firebase.firestore().collection(\"places\").doc(placePath)\r\n    }).then(() => {\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { cloneDeep } from \"lodash\"\r\nimport { TInventory, TPlacesFilled } from \"../redux/types\"\r\n\r\nexport default function filledNodesChecker(placesArr: TPlacesFilled[], inventoryArr: TInventory[], path?: string[]) {\r\n\r\n    const modifiedArr = cloneDeep(placesArr)\r\n    const tempArr: TPlacesFilled[] = []\r\n\r\n    modifiedArr.map((item) => {\r\n        if (!item.parts) {\r\n            inventoryArr.map((invItem) => {\r\n                if (invItem.placeId === item.id && !item.isFilled) {\r\n                    item.isFilled = true\r\n                    tempArr.push(item)\r\n                }\r\n            })\r\n        }\r\n    })\r\n    tempArr.map((item) => {\r\n        item.path?.map((pathId) => {\r\n            modifiedArr.map((item) => {\r\n                if (item.id === pathId && !item.isFilled) {\r\n                    item.isFilled = true\r\n                    return item\r\n                }\r\n            })\r\n        })\r\n    })\r\n    \r\n    return modifiedArr\r\n}\r\n\r\n","import { TPlacesFlat } from \"../redux/types\"\r\n\r\nexport default function pathCreator(arr: TPlacesFlat[], parentId?: string, history: string[] = []): string[] {\r\n    arr.map((item) => {\r\n        if (item.id === parentId) {\r\n            history.unshift(item.id)\r\n            pathCreator(arr, item.parent, history)\r\n        }\r\n        else return history\r\n    })\r\n    return history\r\n}\r\n","import { cloneDeep } from 'lodash'\r\nimport { TPlacesFlat, TPlacesRaw } from '../redux/types'\r\nimport pathCreator from \"./pathCreator\"\r\n\r\nexport default function findNodesRoots(arr: TPlacesRaw[]): TPlacesFlat[] {\r\n    const arrCopy = cloneDeep(arr) as TPlacesFlat[]\r\n\r\n    arrCopy.filter((item) => item.parts).map((item) => {\r\n        function partsChecker(item: TPlacesFlat) {\r\n            item.parts?.map((part) => {\r\n                setParent(item.id, part)\r\n            })\r\n        }\r\n        partsChecker(item)\r\n    })\r\n\r\n    function setParent(parent: string, itemId: string) {\r\n        arrCopy.map((item) => {\r\n            if (item.id === itemId) {\r\n                item.parent = parent\r\n            }\r\n        })\r\n    }\r\n\r\n    arrCopy.map((item) => {\r\n        item.path = pathCreator(arrCopy, item.id)\r\n    })\r\n    \r\n    return arrCopy \r\n}\r\n","import { cloneDeep } from 'lodash'\r\nimport { TPlacesFilled, TPlacesTree } from '../redux/types'\r\n\r\nexport function toTreeArrReducer(arr: TPlacesFilled[]): TPlacesTree[] {\r\n    const sourceNode = cloneDeep(arr)\r\n    const treeArr = sourceNode.filter((item) => !item.parent) as TPlacesTree[]\r\n    \r\n    arrSplice(treeArr)\r\n\r\n    function arrSplice(arr: TPlacesTree[]) {\r\n        arr.map((item) => {\r\n            if (item.parts) {\r\n                item.parts?.map((partId, index) => {\r\n                    if (typeof partId === 'string') {\r\n                        sourceNode.map((sourceItem: any) => {\r\n                            if (sourceItem.id === partId && sourceItem ) {\r\n                                item.parts?.splice(index, 1, sourceItem)\r\n                            }\r\n                        })\r\n                        if(item.parts)\r\n                        arrSplice(item.parts)\r\n                    }\r\n                })\r\n            } else {\r\n                return\r\n            }\r\n        })\r\n    }\r\n    return treeArr \r\n}","import { Dispatch } from 'react'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport { getPlaces, getInventory, deleteInventory, addInventory, editInventory} from '../firebase/firebaseApi'\r\nimport filledNodesChecker from '../helpers/filledNodesChecker'\r\nimport findNodesRoots from '../helpers/findNodesRoots'\r\nimport { toTreeArrReducer} from '../helpers/toTreeReducer'\r\nimport { AppStateType } from './store'\r\nimport { TActionTypes, TInventory, ISetInventoryDataAction, TPlacesTree, TPlacesFlat, ISetPendingStatusAction, ISetPlacesDataAction, ISetPlacesFlattenDataAction, ISetSelectedPlaceAction } from './types'\r\n\r\nexport const SET_INVENTORY_DATA = 'SET_INVENTORY_DATA'\r\nexport const SET_PLACES_TREE_DATA = 'SET_PLACES_TREE_DATA'\r\nexport const SET_PLACES_FLATTEN_DATA = 'SET_PLACES_FLATTEN_DATA'\r\nexport const SET_SELECTED_PLACE = 'SET_SELECTED_PLACE'\r\nexport const SET_PENDING_STATUS = 'SET_PENDING_STATUS'\r\n\r\nconst initialState = {\r\n    placesTree: [] as TPlacesTree[],\r\n    placesFlat: [] as TPlacesFlat[],\r\n    inventory: [] as TInventory[],\r\n    selectedPlace: {} as TPlacesTree,\r\n    isPending: false,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const fireBaseDataReducer = (state = initialState, action: TActionTypes): InitialStateType => {\r\n    \r\n    switch (action.type) {\r\n        case SET_PLACES_TREE_DATA: {\r\n            return {\r\n                ...state,\r\n                placesTree: [\r\n                    ...action.data.map((item: TPlacesTree) => item)]\r\n            }\r\n        }\r\n        case SET_PLACES_FLATTEN_DATA: {\r\n            return {\r\n                ...state,\r\n                placesFlat: [\r\n                    ...action.data.map((item: TPlacesFlat) => item)]\r\n            }\r\n        }\r\n        case SET_INVENTORY_DATA: {\r\n            return {\r\n                ...state,\r\n                inventory: [...action.data.map((item: TInventory) => item)]\r\n            }\r\n        }\r\n            \r\n        case SET_SELECTED_PLACE: {\r\n            return {\r\n                ...state,\r\n                selectedPlace: action.place\r\n            }\r\n        }\r\n            \r\n        case SET_PENDING_STATUS: {\r\n            return {\r\n                ...state,\r\n                isPending: action.status\r\n            }\r\n        }\r\n        \r\n        default: return state\r\n    }\r\n}\r\n\r\nexport type TDispatch = Dispatch<TActionTypes | TThunkAction>\r\nexport type TThunkAction = ThunkAction<\r\n    Promise<void>,\r\n    AppStateType,\r\n    unknown,\r\n    TActionTypes>\r\n\r\n    \r\nexport const dataInit = () => async (dispatch: TDispatch) => {\r\n    const responseInv = await getInventory()\r\n    dispatch(setInventoryDataAction(responseInv))\r\n    const response = await getPlaces()\r\n    dispatch(setPlacesFlattenDataAction(findNodesRoots(response)))\r\n    \r\n    dispatch(setPlacesTreeDataAction(toTreeArrReducer(\r\n        filledNodesChecker((findNodesRoots(response)), responseInv)\r\n    )))\r\n}   \r\n\r\nexport const setInventoryThunk = (placesFlat?: TPlacesFlat[]): TThunkAction => async (dispatch: TDispatch) => {\r\n    const responseInv = await getInventory()\r\n    dispatch(setInventoryDataAction(responseInv))\r\n    if (placesFlat) {\r\n        dispatch(setPlacesTreeDataAction(toTreeArrReducer(filledNodesChecker(placesFlat, responseInv))))\r\n    }\r\n}   \r\n\r\nexport const addInventoryItemThunk = (name: string, placeId: string, count: string, placesFlat: TPlacesFlat[]): TThunkAction => async (dispatch: TDispatch) => {\r\n    dispatch(setPendingStatusAction(true))\r\n    await addInventory(name, placeId, count)\r\n    await dispatch(setInventoryThunk(placesFlat))\r\n    dispatch(setPendingStatusAction(false))\r\n}\r\n\r\nexport const editInventoryItemThunk = (id: string, name: string, count: string, placePath: string): TThunkAction => async (dispatch: TDispatch) => {\r\n    dispatch(setPendingStatusAction(true))\r\n    await editInventory(id, name, count, placePath)\r\n    await dispatch(dataInit())\r\n    dispatch(setPendingStatusAction(false))\r\n} \r\n\r\nexport const deleteInventoryItemThunk = (id: string, placesFlat: TPlacesFlat[]): TThunkAction => async (dispatch: TDispatch) => {\r\n    dispatch(setPendingStatusAction(true))\r\n    await deleteInventory(id)\r\n    await dispatch(setInventoryThunk(placesFlat))\r\n    dispatch(setPendingStatusAction(false))\r\n}\r\n\r\n\r\nexport const setPlacesTreeDataAction = (data: TPlacesTree[]): ISetPlacesDataAction => ({ type: SET_PLACES_TREE_DATA, data })\r\n\r\nexport const setPlacesFlattenDataAction = (data: TPlacesFlat[]): ISetPlacesFlattenDataAction => ({ type: SET_PLACES_FLATTEN_DATA, data })\r\n\r\nexport const setInventoryDataAction = (data: TInventory[]): ISetInventoryDataAction => ({ type: SET_INVENTORY_DATA, data })\r\n\r\nexport const setSelectedPlaceAction = (place: TPlacesTree): ISetSelectedPlaceAction => ({ type: SET_SELECTED_PLACE, place })\r\n\r\nexport const setPendingStatusAction = (status: boolean): ISetPendingStatusAction => ({ type: SET_PENDING_STATUS, status })\r\n","import { connect } from 'react-redux'\r\nimport React from 'react'\r\nimport PlacesExplorer from './PlacesExplorer'\r\nimport { setSelectedPlaceAction} from '../../redux/firebaseDataReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { TPlacesTree } from '../../redux/types'\r\n\r\ntype TMapState = {\r\n    placesTree: TPlacesTree[]\r\n    selectedPlace: TPlacesTree\r\n}\r\n\r\ntype TMapDispatch = {\r\n    setSelectedPlaceAction: (place: TPlacesTree) => void\r\n}\r\n\r\ntype TProps = TMapState & TMapDispatch\r\n\r\nconst PlacesExplorerContainer: React.FC<TProps> = (props) => {\r\n   \r\n    return (\r\n        <PlacesExplorer placesTree={props.placesTree}\r\n            selectedPlace={props.selectedPlace}\r\n            setSelectedPlaceAction={props.setSelectedPlaceAction} />\r\n    )  \r\n}\r\n\r\n\r\nconst mapState = (state: AppStateType): TMapState => {\r\n    return ({\r\n        placesTree: state.fireBase.placesTree,\r\n        selectedPlace: state.fireBase.selectedPlace,\r\n    })\r\n}\r\n\r\n\r\nexport default connect<TMapState, TMapDispatch, {}, AppStateType>(mapState, { setSelectedPlaceAction })(PlacesExplorerContainer)","export default __webpack_public_path__ + \"static/media/add.975f2872.svg\";","export default __webpack_public_path__ + \"static/media/edit.31d9b074.svg\";","export default __webpack_public_path__ + \"static/media/delete.838f7bdf.svg\";","import React, { FormEvent, useEffect, useState } from 'react'\r\nimport { TInventory, TPlacesFlat } from '../../../redux/types'\r\nimport style from './InventoryForm.module.scss'\r\n\r\ntype TProps = { \r\n    placesFlat?: TPlacesFlat[]\r\n    inventory?: TInventory\r\n    path?: string[]\r\n    editMode?: boolean \r\n    isPending?: boolean\r\n    selectedPlaceId?: string \r\n    role: string\r\n    setPendingStatus?: React.Dispatch<React.SetStateAction<boolean>>\r\n    setEditMode?: React.Dispatch<React.SetStateAction<boolean>>\r\n    addInventoryItem?: (name: string, placeId: string, count: string, placesFlat: TPlacesFlat[]) => void \r\n    editInventoryItem?: (id: string, name: string, count: string, placePath: string) => void\r\n}\r\n\r\nconst InventoryForm: React.FC<TProps> = (props) => {\r\n    const [name, setName] = useState('')\r\n    const [count, setCount] = useState('')\r\n    const [nameValid, setNameValid] = useState('default')\r\n    const [countValid, setCountValid] = useState('default')\r\n    const [formClass, setFormClass] = useState(style.form)\r\n\r\n    useEffect(() => {\r\n        if (props.role === 'listItem' && typeof props.inventory !== 'undefined'){\r\n            setName(props.inventory.name)\r\n            setCount(`${props.inventory.count}`)\r\n            setFormClass(`${style.form} ${style.listItemParamsWrapper}`)\r\n        }\r\n\r\n        if (props.role === 'modal')\r\n            setFormClass(`${style.form} ${style.modalWrapper}`)\r\n            \r\n    }, [props.editMode, props.inventory?.name, props.inventory?.count])\r\n    \r\n    function validateName(value: string): string {\r\n        return value.trim() && value.match(/[a-zа-яё]/i)\r\n            ? 'valid'\r\n            : 'notValid'\r\n    }\r\n\r\n    function validateCount(value: string): string {\r\n        return value.match(/^[1-9]\\d*$/)\r\n            ? 'valid'\r\n            : 'notValid'\r\n    }\r\n\r\n    function handleInputChange(e: React.FormEvent<HTMLInputElement>) {\r\n        if (e.currentTarget.name === 'name') {\r\n            setName(e.currentTarget.value)\r\n            setNameValid(validateName(e.currentTarget.value))\r\n        }\r\n            \r\n        if (e.currentTarget.name === 'count') {\r\n            setCount(e.currentTarget.value)\r\n            setCountValid(validateCount(e.currentTarget.value))\r\n        }\r\n    }\r\n    \r\n    function onSubmitingForm(e: FormEvent<HTMLFormElement>) {\r\n        e.preventDefault()\r\n        setNameValid(validateName(name))\r\n        setCountValid(validateCount(count))\r\n        \r\n        if (nameValid === 'notValid') setName('')\r\n        \r\n        if (countValid === 'notValid') setCount('')\r\n\r\n        if (props.role === 'modal' && props.addInventoryItem && props.selectedPlaceId && props.placesFlat) {\r\n            if (countValid === 'valid' && nameValid === 'valid') {\r\n                props.addInventoryItem(name, props.selectedPlaceId, count, props.placesFlat)\r\n                setCount('')\r\n                setName('')\r\n            }\r\n        }\r\n        if (props.role === 'listItem' && props.inventory && props.path && props.setPendingStatus && props.editInventoryItem && props.setEditMode) {\r\n            if (countValid === 'valid' || countValid === 'default'\r\n                && nameValid === 'valid' || nameValid === 'default') {\r\n                props.setPendingStatus(true)\r\n                props.editInventoryItem(props.inventory.id, name, count, props.path?.join('/'))\r\n                props.setEditMode(true)\r\n            }\r\n        }\r\n    }\r\n    function closeEdit() {\r\n        setNameValid('default')\r\n        setCountValid('default')\r\n        if (props.setEditMode)\r\n        props.setEditMode(true)\r\n    }\r\n    return (\r\n        <form className={formClass}\r\n            onSubmit={onSubmitingForm}>\r\n            <div className={`${style.inputWrapper} ${nameValid === 'notValid' && style.error}`}>\r\n                <label>Наименование</label>\r\n                <div className={`${style.textWrapper} ${props.editMode && style.disabled}`}>\r\n                    <input type=\"text\"\r\n                        name=\"name\"\r\n                        placeholder=\"Введите наименование\"\r\n                        onChange={handleInputChange}\r\n                        onBlur={handleInputChange}\r\n                        value={name}\r\n                        autoComplete='off'\r\n                        disabled={props.editMode}>\r\n                    </input>\r\n                    {props.editMode && <div className={style.fullText}>{name}</div>}\r\n                </div>\r\n            </div>\r\n            <div className={`${style.inputWrapper} ${countValid === 'notValid' && style.error}`}>\r\n                <label>Количество</label>\r\n                <input type=\"text\"\r\n                    name=\"count\"\r\n                    placeholder=\"Введите число\"\r\n                    onChange={handleInputChange}\r\n                    onBlur={handleInputChange}\r\n                    value={count}\r\n                    autoComplete=\"off\"\r\n                    disabled={props.editMode} />\r\n            </div>\r\n            <div className={style.buttonsWrapper}>\r\n                {!props.editMode && <button type=\"submit\" className={`${style.formButton} ${style.submit} `}>подтвердить</button>}\r\n                {!props.editMode && props.role === 'listItem' &&\r\n                    <button type=\"button\" onClick={closeEdit} className={`${style.formButton} ${style.cancel}`}>отменить</button>}\r\n            </div>\r\n            \r\n           \r\n        </form>\r\n    )\r\n    \r\n}\r\nexport default InventoryForm","import React from 'react'\r\nimport style from './InventoryActionButton.module.scss'\r\n\r\ntype TProps = {\r\n    icon: string\r\n    role: string\r\n    btnClickHandler: (role: string) => void\r\n}\r\n\r\nconst ActionButton: React.FC<TProps> = (props) => {\r\n    function clickHandler() {\r\n        props.btnClickHandler(props.role)\r\n    }\r\n    return (\r\n        <div onClick={clickHandler} className={`${style.icon}`}>\r\n            <img src={props.icon} alt={`${props.icon}`} />\r\n        </div>\r\n    )\r\n    \r\n}\r\nexport default ActionButton","import React, { useEffect, useState } from 'react'\r\nimport style from './InventoryListItem.module.scss'\r\nimport editIcon from '../../../assets/icons/edit.svg'\r\nimport deleteIcon from '../../../assets/icons/delete.svg'\r\nimport InventoryForm from '../inventoryForm/InventoryForm'\r\nimport Spinner from '../../spinner/Spinner'\r\nimport { TInventory, TPlacesTree } from '../../../redux/types'\r\nimport ActionButton from './inventoryActionButton/InventoryActionButton'\r\n\r\ntype TProps = {\r\n    inventory: TInventory\r\n    selectedPlace: TPlacesTree\r\n    editModeId: string\r\n    isPending: boolean\r\n    editInventoryItem: (id: string, name: string, count: string, placePath: string) => void\r\n    btnClickHandler: (role: string, inventoryId?: string) => void\r\n}\r\n\r\nconst InventoryListItem: React.FC <TProps> = (props) => {\r\n    const [editMode, setEditModeId] = useState(true)\r\n    const [pendingStatus, setPendingStatus] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (!props.isPending) setPendingStatus(false)\r\n    }, [props.isPending])\r\n\r\n    function btnClickHandler(role: string) {\r\n        if (role === 'edit') setEditModeId(!editMode)\r\n        if (role === 'delete') {\r\n            setPendingStatus(true)\r\n            props.btnClickHandler(role, props.inventory.id)\r\n        }\r\n    }\r\n    \r\n    return ( \r\n        <li className={style.inventoryListItemWrapper}>\r\n            <div className={style.inventoryListItem}>\r\n                <InventoryForm role={'listItem'}\r\n                    editInventoryItem={props.editInventoryItem}\r\n                    inventory={props.inventory}\r\n                    path={props.selectedPlace.path}\r\n                    editMode={editMode}\r\n                    setEditMode={setEditModeId}\r\n                    isPending={props.isPending}\r\n                    setPendingStatus={setPendingStatus}/>\r\n                \r\n                {!props.selectedPlace.parts && <div className={style.iconWrapper}>\r\n                    <ActionButton role={'edit'} icon={editIcon} btnClickHandler={btnClickHandler}/>\r\n                    <ActionButton role={'delete'}\r\n                        icon={deleteIcon}\r\n                        btnClickHandler={btnClickHandler}/>\r\n                </div>}\r\n            </div>\r\n            {pendingStatus && <div className={style.spinnerWrapper}>\r\n                <Spinner width={80}/>\r\n            </div>}\r\n        </li>\r\n    )\r\n    \r\n}\r\nexport default InventoryListItem","import React from 'react'\r\nimport { TPlacesFlat } from '../../../redux/types'\r\nimport Spinner from '../../spinner/Spinner'\r\nimport InventoryForm from '../inventoryForm/InventoryForm'\r\nimport style from './AddItemModal.module.scss'\r\n\r\ntype TProps = {\r\n    isPending: boolean\r\n    placesFlat: TPlacesFlat[]\r\n    selectedPlaceId: string \r\n    modalToggle: () => void\r\n    addInventoryItem: (name: string, placeId: string, count: string, placesFlat: TPlacesFlat[]) => void\r\n}\r\n\r\nconst AddItemModal: React.FC<TProps> = (props) => {\r\n    \r\n    function closeModal(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\r\n        if(e.target === e.currentTarget) props.modalToggle()\r\n    }\r\n    return (\r\n        <div className={style.modalWrapper}\r\n            onClick={closeModal}>\r\n\r\n            <div className={style.modal}>\r\n                {props.isPending && <div className={style.spinnerWrapper}>\r\n                    <Spinner width={100} />\r\n                </div>}\r\n                <h4>Добавление оборудования</h4>\r\n                <InventoryForm\r\n                    role={'modal'}\r\n                    selectedPlaceId={props.selectedPlaceId}\r\n                    addInventoryItem={props.addInventoryItem}\r\n                    placesFlat={props.placesFlat}/>\r\n            </div>\r\n        </div>\r\n    )\r\n    \r\n}\r\nexport default AddItemModal","import React, { useState } from 'react'\r\nimport style from './MainView.module.scss'\r\nimport addIcon from '../../assets/icons/add.svg'\r\nimport InventoryListItem from './inventoryListItem/InventoryListItem'\r\nimport AddItemModal from './AddItemModal/AddItemModal'\r\nimport { TInventory, TPlacesTree, TPlacesFlat} from '../../redux/types'\r\nimport ActionButton from './inventoryListItem/inventoryActionButton/InventoryActionButton'\r\n\r\ntype TProps = {\r\n    inventory: TInventory[]\r\n    selectedPlace: TPlacesTree\r\n    placesFlat: TPlacesFlat[]\r\n    isPending: boolean\r\n    editInventoryItem: (id: string, name: string, count: string, placePath: string) => void\r\n    deleteInventoryItem: (id: string, placesFlat: TPlacesFlat[]) => void\r\n    addInventoryItem: (name: string, placeId: string, count: string, placesFlat: TPlacesFlat[]) => void\r\n}\r\n\r\nconst MainView: React.FC<TProps> = (props) => {\r\n    const [isModalOpen, setModalState] = useState(false)\r\n    const [editModeId, setEditModeId] = useState('')\r\n    \r\n    function modalToggle(): void {\r\n        setModalState(!isModalOpen)\r\n    }\r\n    function editModeToggle(inventoryId: string): void {\r\n        \r\n        setEditModeId(inventoryId)\r\n       \r\n    }\r\n    function btnClickHandler(role: string, inventoryId: string = ''): void {\r\n        \r\n        switch (role) {\r\n            case 'edit': editModeToggle(inventoryId)\r\n                break\r\n            case 'delete': props.deleteInventoryItem(inventoryId, props.placesFlat) \r\n                break\r\n            case 'add': modalToggle()\r\n                break\r\n                \r\n            default: return\r\n        }\r\n    }\r\n    return (\r\n        <div className={`${style.viewComponent} ${isModalOpen && style.modalOpened}`}>\r\n            <h1>Список оборудования</h1>\r\n            <hr />\r\n            {!props.selectedPlace.id && <span className={style.info}>Выберите помещение в меню слева, чтобы поспотреть имеющееся в ней оборудование</span>}\r\n            {props.selectedPlace.id &&\r\n                <section className={style.inventoryListWrapper}>\r\n                <div className={style.sectionTopRow}>\r\n                    <div className={`${style.inventoryListHeader} ${style.inventoryListItem}`}>\r\n                        <h4>{props.selectedPlace.name}</h4>\r\n                    </div>\r\n                    {props.selectedPlace.id && !props.selectedPlace.parts &&\r\n                    <ActionButton\r\n                        icon={addIcon}\r\n                        role={'add'}\r\n                        btnClickHandler={btnClickHandler} />}\r\n                </div>\r\n                <ul className={style.inventoryList}>\r\n                    {props.inventory.map((item) => {\r\n                        if (props.selectedPlace.id) {\r\n                            return <InventoryListItem\r\n                                editInventoryItem={props.editInventoryItem}\r\n                                btnClickHandler={btnClickHandler}\r\n                                key={item.id}\r\n                                inventory={item}\r\n                                selectedPlace={props.selectedPlace}\r\n                                editModeId={editModeId}\r\n                                isPending={props.isPending}/>\r\n                        }\r\n                    })}\r\n                </ul>\r\n            </section>}\r\n            {isModalOpen && <AddItemModal\r\n                modalToggle={modalToggle}\r\n                addInventoryItem={props.addInventoryItem}\r\n                selectedPlaceId={props.selectedPlace.id}\r\n                isPending={props.isPending}\r\n                placesFlat={props.placesFlat}/>}\r\n        </div>\r\n    )\r\n    \r\n}\r\nexport default React.memo(MainView)","import React, { useCallback, useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport MainView from './MainView'\r\nimport { editInventoryItemThunk, deleteInventoryItemThunk, addInventoryItemThunk }from '../../redux/firebaseDataReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { TInventory, TPlacesFlat, TPlacesTree} from '../../redux/types'\r\n\r\n\r\ntype TMapState = {\r\n    inventory: TInventory[]\r\n    selectedPlace: TPlacesTree\r\n    placesFlat: TPlacesFlat[]\r\n    isPending: boolean\r\n}\r\ntype TMapDispatch = {\r\n    editInventoryItemThunk: (id: string, name: string, count: string, placePath: string) => void\r\n    deleteInventoryItemThunk: (id: string, placesFlat: TPlacesFlat[]) => void\r\n    addInventoryItemThunk: (name: string, placeId: string, count: string, placesFlat: TPlacesFlat[]) => void\r\n}\r\ntype TProps = TMapState & TMapDispatch\r\n\r\n\r\nconst MainViewContainer: React.FC<TProps> = (props) => {\r\n    const [currentInventory, setCurrentInventory] = useState<Array<TInventory>>([])\r\n\r\n    useEffect(() => {\r\n        setCurrentInventory((): TInventory[] => {\r\n            const currentPlaceInventory: TInventory[] = []\r\n            props.inventory.map((invItem) => {\r\n                if (props.selectedPlace.parts) {\r\n                    deepChildsSearch(props.selectedPlace.parts)\r\n                        .map((item) => {\r\n                            if (item.id === invItem.placeId) {\r\n                                currentPlaceInventory.push(invItem)\r\n                            }\r\n                        })\r\n                } else if (invItem.placeId === props.selectedPlace.id) {\r\n                    currentPlaceInventory.push(invItem)\r\n                }\r\n            })\r\n            \r\n            return currentPlaceInventory\r\n        })\r\n        \r\n    }, [props.selectedPlace, props.inventory])\r\n\r\n    const deepChildsSearch = useCallback(\r\n        (arr: TPlacesTree[], nodeChildsArr: TPlacesTree[] = []) => {\r\n            arr.map((item) => {\r\n                if (!item.parts) {\r\n                    nodeChildsArr.push(item)\r\n                }\r\n                if (item.parts) {\r\n                    deepChildsSearch(item.parts, nodeChildsArr)\r\n                }\r\n            })\r\n            return nodeChildsArr\r\n        }, [])\r\n\r\n    return (\r\n        <MainView inventory={currentInventory}\r\n            selectedPlace={props.selectedPlace}\r\n            isPending={props.isPending}\r\n            placesFlat={props.placesFlat}\r\n            editInventoryItem={props.editInventoryItemThunk}\r\n            deleteInventoryItem={props.deleteInventoryItemThunk}\r\n            addInventoryItem={props.addInventoryItemThunk}\r\n        />\r\n        \r\n        \r\n    )\r\n}\r\nfunction mapState(state: AppStateType): TMapState {\r\n    \r\n    return ({\r\n        inventory: state.fireBase.inventory,\r\n        selectedPlace: state.fireBase.selectedPlace,\r\n        placesFlat: state.fireBase.placesFlat,\r\n        isPending: state.fireBase.isPending,\r\n    })\r\n}\r\n\r\nexport default connect<TMapState, TMapDispatch, {}, AppStateType>(mapState, { editInventoryItemThunk, deleteInventoryItemThunk, addInventoryItemThunk })(MainViewContainer)","import { type } from 'os';\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport './App.scss';\nimport ExplorerComponentContainer from './components/explorer/PlacesExplorerContainer';\nimport MainViewComponentContainer from './components/mainView/MainViewContainer';\nimport { fireBaseDataInit } from './firebase/firebaseApi';\nimport { dataInit, TDispatch } from './redux/firebaseDataReducer';\nimport { AppStateType } from './redux/store';\n\ntype TMapDispatch = {\n  dataInit: () => void\n}\ntype TProps = TMapDispatch\nconst App: React.FC<TProps> = (props) => {\n  useEffect(() => {\n    fireBaseDataInit()\n    props.dataInit()\n  }, [])\n\n  return (\n    <div className='container'>\n      <ExplorerComponentContainer/>\n      <MainViewComponentContainer/>\n    </div>\n  );\n}\n\nexport default connect<{}, TMapDispatch, unknown, AppStateType>(() => { return {} }, { dataInit})(App)\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport { fireBaseDataReducer } from './firebaseDataReducer'\r\nimport thunk from 'redux-thunk';\r\n\r\n\r\nconst reducers = combineReducers({\r\n    fireBase: fireBaseDataReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux'\nReactDOM.render(\n\n\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"InventoryForm_form__2U266\",\"modalWrapper\":\"InventoryForm_modalWrapper__23J_Q\",\"inputWrapper\":\"InventoryForm_inputWrapper__3aldT\",\"error\":\"InventoryForm_error__39Omt\",\"buttonsWrapper\":\"InventoryForm_buttonsWrapper__JP-US\",\"listItemParamsWrapper\":\"InventoryForm_listItemParamsWrapper__3xySU\",\"textWrapper\":\"InventoryForm_textWrapper__3rok5\",\"disabled\":\"InventoryForm_disabled__19t2Q\",\"fullText\":\"InventoryForm_fullText__ze19X\",\"formButton\":\"InventoryForm_formButton__C3Wa-\",\"submit\":\"InventoryForm_submit__3UuNU\",\"cancel\":\"InventoryForm_cancel__3W87D\"};"],"sourceRoot":""}